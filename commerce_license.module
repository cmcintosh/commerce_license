<?php

/**
 * @file
 * Defines the License entity and associated features.
 */

use Drupal\commerce\BundleFieldDefinition;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_config_translation_info_alter().
 */
function commerce_license_config_translation_info_alter(&$info) {
  $info['commerce_license_attribute']['class'] = '\Drupal\commerce_license\ConfigTranslation\LicenseAttributeMapper';
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function commerce_license_entity_form_display_update(EntityFormDisplayInterface $form_display) {
  // Reset the cached attribute field map when the 'default' license variation
  // form mode is updated, since the map ordering is based on it.
  if ($form_display->getTargetEntityTypeId() == 'commerce_license_variation' && $form_display->getMode() == 'default') {
    $attribute_field_manager = \Drupal::service('commerce_license.attribute_field_manager');
    $attribute_field_manager->clearCaches();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function commerce_license_entity_view_display_update(EntityInterface $entity) {
  // The license view uses the variation view and needs to be cleared, which doesn't happen automatically
  // because we're editing the variation, not the license
  if (substr($entity->getConfigTarget(), 0, 27) === 'commerce_license_variation.') {
    Cache::invalidateTags(['commerce_license_view']);
  }
}

/**
 * Implements hook_entity_access().
 */
function commerce_license_entity_access(EntityInterface $entity, $operation, $account) {
  // Allow published licenses to be viewed by all users for now.
  // @todo Remove once we implement the full license permissions.
  if ($operation == 'view') {
    if ($entity->getEntityTypeId() == 'commerce_license' && $entity->isPublished()) {
      return AccessResult::allowed();
    }
    elseif ($entity->getEntityTypeId() == 'commerce_license_variation' && $entity->isActive()) {
      return AccessResult::allowed();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_theme().
 */
function commerce_license_theme() {
  return [
    'commerce_license_form' => [
      'render element' => 'form',
    ],
    'commerce_license' => [
      'render element' => 'elements',
    ],
    'commerce_license_variation' => [
      'render element' => 'elements',
    ],
    'commerce_license_attribute_value' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_commerce_license().
 */
function commerce_license_theme_suggestions_commerce_license(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_license', $variables);
}

/**
 * Implements hook_theme_suggestions_commerce_license_variation().
 */
function commerce_license_theme_suggestions_commerce_license_variation(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_license_variation', $variables);
}

/**
 * Implements hook_theme_suggestions_commerce_license_commerce_license_attribute_value().
 */
function commerce_license_theme_suggestions_commerce_license_attribute_value(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_license_attribute_value', $variables);
}

/**
 * Prepares variables for license templates.
 *
 * Default template: commerce-license.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_license(array &$variables) {
  /** @var Drupal\commerce_license\Entity\LicenseInterface $license */
  $license = $variables['elements']['#commerce_license'];

  $variables['license_entity'] = $license;
  $variables['license_url'] = $license->toUrl();
  $variables['license'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['license'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for license variation templates.
 *
 * Default template: commerce-license-variation.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_license_variation(array &$variables) {
  /** @var Drupal\commerce_license\Entity\LicenseVariationInterface $license_variation */
  $license_variation = $variables['elements']['#commerce_license_variation'];
  $license = $license_variation->getLicense();

  $variables['license_variation_entity'] = $license_variation;
  $variables['license_url'] = $license->toUrl();
  $variables['license_variation'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['license_variation'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for license attribute value templates.
 *
 * Default template: commerce-license-attribute-value.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_license_attribute_value(array &$variables) {
  /** @var Drupal\commerce_license\Entity\LicenseAttributeValueInterface $license */
  $attribute_value = $variables['elements']['#commerce_license_attribute_value'];

  $variables['license_attribute_value_entity'] = $attribute_value;
  $variables['license_attribute_value'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['license_attribute_value'][$key] = $variables['elements'][$key];
  }
}

/**
 * Adds the default stores field to a license.
 *
 * A license can belong to multiple stores.
 * Store id can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each order type.
 *
 * @param \Drupal\commerce_license\Entity\LicenseTypeInterface $license_type
 *   The license type.
 */
function commerce_license_add_stores_field($license_type) {
  $field_definition = BundleFieldDefinition::create('entity_reference')
    ->setTargetEntityTypeId('commerce_license')
    ->setTargetBundle($license_type->id())
    ->setName('stores')
    ->setLabel('Stores')
    ->setCardinality(BundleFieldDefinition::CARDINALITY_UNLIMITED)
    ->setRequired(TRUE)
    ->setSetting('target_type', 'commerce_store')
    ->setSetting('handler', 'default')
    ->setDisplayOptions('form', [
      'type' => 'commerce_entity_select',
      'weight' => -10,
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition);
}

/**
 * Adds the default body field to a license type.
 *
 * @param \Drupal\commerce_license\Entity\LicenseTypeInterface $license_type
 *   The license type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Body'.
 */
function commerce_license_add_body_field($license_type, $label = 'Body') {
  $field_definition = BundleFieldDefinition::create('text_with_summary')
    ->setTargetEntityTypeId('commerce_license')
    ->setTargetBundle($license_type->id())
    ->setName('body')
    ->setLabel($label)
    ->setSetting('display_summary', FALSE)
    ->setDisplayOptions('form', [
      'type' => 'text_textarea_with_summary',
      'weight' => 1,
    ])
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'text_default',
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition, FALSE);
}

/**
 * Adds the default variations field to a license type.
 *
 * Variations can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each license type.
 *
 * @param \Drupal\commerce_license\Entity\LicenseTypeInterface $license_type
 *   The license type.
 */
function commerce_license_add_variations_field($license_type) {
  $field_definition = BundleFieldDefinition::create('entity_reference')
    ->setTargetEntityTypeId('commerce_license')
    ->setTargetBundle($license_type->id())
    ->setName('variations')
    ->setLabel('Variations')
    ->setCardinality(BundleFieldDefinition::CARDINALITY_UNLIMITED)
    ->setRequired(TRUE)
    ->setSetting('target_type', 'commerce_license_variation')
    ->setSetting('handler', 'default')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        $license_type->getVariationTypeId(),
      ],
    ])
    ->setDisplayOptions('form', [
      'type' => 'inline_entity_form_complex',
      'weight' => 10,
      'settings' => [
        'override_labels' => TRUE,
        'label_singular' => 'variation',
        'label_plural' => 'variations',
      ],
    ])
    ->setDisplayOptions('view', [
      'type' => 'commerce_add_to_cart',
      'weight' => 10,
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_license_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $widget_name = $context['widget']->getPluginId();
  $required = $field_definition->isRequired();
  if ($field_name == 'path' && $entity_type == 'commerce_license' && $widget_name == 'path') {
    $element['alias']['#description'] = t('The alternative URL for this license. Use a relative path. For example, "/my-license".');
  }
  elseif ($field_name == 'title' && $entity_type == 'commerce_license_variation' && !$required) {
    // The title field is optional only when its value is automatically
    // generated, in which case the widget needs to be hidden.
    $element['#access'] = FALSE;
  }
}
