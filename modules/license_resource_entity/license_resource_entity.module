<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

/**
* Implements hook_entity_access to provide access to various types of entities.
*  - This is used to override default behavior where needed.
*/
function license_resource_entity_entity_access(EntityInterface $entity, $op, AccountInterface $account) {
  $entity_type = $entity->getEntityTypeId();
  $entity_id = $entity->id();
  $bundle = $entity->bundle();
  if ( $acl_id = acl_get_id_by_name('resource_entity', "resource_entity_{$entity_type}_{$entity_id}") ){
    if ($account == null || $account->id() < 1) {
      return AccessResult::forbidden();
    }
    $has_user = acl_has_user($acl_id, $account->id());
    return AccessResult::allowedIf( ($has_user == 1 || $account->hasPermission('administer nodes')) );
  }
  else if ( $acl_id = acl_get_id_by_name('resource_entity', "resource_entity_{$entity_type}_{$bundle}") ) {
    return AccessResult::forbidden();
  }
  else {
    return AccessResult::neutral();
  }
}

/**
* Implements hook_node_grants
*/

/**
* Implements hook_ENTITY_TYPE_insert
*/
function license_resource_entity_node_insert(EntityInterface $entity) {

  // First check if we have any licenses working for this bundle
  if ($entity->status) {
    $type = $entity->bundle();

    $query = \Drupal::database()
      ->select('resource_new_entity', 're');
    $query->join('commerce_license_variation_field_data', 'clfd', 'clfd.sku = re.sku');
    $query->join('commerce_license_customer_license', 'clu', 'clu.variation_id = clfd.variation_id');
    $query->addField('clu', 'uid');
    $query->addField('clu', 'id');
    $query->addField('clu', 'data');
    $query->condition('re.bundle', $type, '=');
    $results = $query->execute()->fetchAllAssoc('uid');

    // Create the ACL for the new node.
    $entity_id = $entity->id();
    acl_create_acl('resource_entity', "resource_entity_node_{$entity_id}");
    $acl_id = acl_get_id_by_name('resource_entity', "resource_entity_node_{$entity_id}");

    foreach($results as $uid => $row) {

      $row->data = unserialize($row->data);

      if ($row->data['resource']['resource_new_entity']['quantity'] > 0) {
        acl_add_user($acl_id, $uid);
        acl_create_acl('content_access', "view_{$entity_id}");
        $c_aclid = acl_get_id_by_name('content_access', "view_{$entity_id}");
        db_merge('acl_user')
          ->key(['acl_id' => $c_aclid, 'uid' => $uid])
          ->fields([
            'acl_id' => $c_aclid,
            'uid' => $uid
          ]);


        // Next update remaining quantity.
        $row->data['resource']['resource_new_entity']['quantity'] =
          $row->data['resource']['resource_new_entity']['quantity'] - 1;
        db_merge('commerce_license_customer_license')
        ->key(array('id' => $row->id))
        ->fields([
          'data' => serialize($row->data),
        ])
        ->execute();
      }
    }
    // Rebuild our access for the node.
    $node = node_load($entity_id);
    \Drupal::entityManager()->getAccessControlHandler('node')
      ->writeGrants($node);
  }
}

/**
* Implements hook_entity_{entity_type}_delete
*/
function license_resource_license_variation_delete(Drupal\Core\Entity\EntityInterface $entity) {

  db_delete('resource_existing_entity')
   ->condition('sku', $entity->getSKU())
   ->execute();

  db_delete('resource_new_entity')
   ->condition('sku', $entity->getSKU())
   ->execute();

   db_delete('resource_newest_entity')
    ->condition('sku', $entity->getSKU())
    ->execute();

}

/**
* Creates a simple callback so that developers can create customized behavior.
*/
function license_resource_entity_has_access(EntityInterface $entity, $op, AccountInterface $account) {



  return true;
}
